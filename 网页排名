def get_page(url):
    try:
        import urllib
        return urllib.urlopen(url).read()
    except:
        return ''
        
 def get_next_target(page):
    start_lik = page.find("<a href=")
    if start_link == -1:
      return 0
    start_quote = page.find('"', start_link)
    end_quote = page.find('"', start_quote + 1)
    url = page[start_quote + 1:end_quote]
    return url, end_quote
    
 def get_all_link(page):
    links=[]
    while True:
      url,end_quote= get_next_target(page)
      if url:
        links.append(url)
        page=page[end_quote:]
      else:
        break
    return links
    
 def union(p,q):
    for i in q:
        if i not in p:
            p.append(i)
    
 def crawl_web(seeds):
     tocrawl = [seeds]
     crawled = []
     index = []
     graph={}
     while tocrawl:
        page = tocrawl.pop()
        if page not in crawled:
            content = get_page(page)
            add_page_to_index(index, paeg, content)
            outlinks = get_all_link(content)
            graph[page] = outlinks
            union(tocrawl, outlinks)
            crawled.append(page)
            
   def compute_rank(graph):
      d = 0.8
      numloops = 10
      ranks = {}
      npages = len(graph)
      for page in graph:
        ranks[page] = 1.0/npages
      for i in range(numloops):
        newranks = {}
        for page in graph:
            newrank = (1-d)/npages
            for node in graph:
              if page in graph[node]:
                newrank = newrank + d*(ranks[node]/len(graph[node]))
            newranks[page] = newrank
        ranks = newranks
      return ranks
     return crawled,index
     
     
